# Existing server block for petosapp.echa.ir
server {
    listen 80;
    server_name petosapp.echa.ir; # <-- IMPORTANT: Change this

    location / {
        # Forward requests to the 'backend' service on the port it's running on
        proxy_pass http://backend:3000; # <-- Make sure '8000' matches your backend's port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# New server block for petosapp.ir
server {
    listen 80;
    # Listen on IPv6 as well, if applicable
    # listen [::]:80;

    server_name petosapp.ir www.petosapp.ir; # Handle both bare domain and www subdomain

    # Optional: Define a default root for static files if petosapp.ir serves any content
    # For example, if you have an index.html or other static assets for petosapp.ir
    # root /var/www/petosapp.ir/html;
    # index index.html index.htm;

    # Log files specific to this domain (recommended for better debugging)
    access_log /var/log/nginx/petosapp.ir.access.log;
    error_log /var/log/nginx/petosapp.ir.error.log;

    # --- Location block for /api requests on petosapp.ir ---
    location /api/ {
        # Proxy requests to localhost:3000
        # The trailing slash on proxy_pass URL (http://localhost:3000/) is important!
        # It tells Nginx to pass the URI *after* the matched location prefix (/api/).
        # Example: A request to petosapp.ir/api/users will be proxied to http://localhost:3000/users
        proxy_pass http://backend:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- Catch-all location for other requests on petosapp.ir ---
    location / {
        # What should happen for petosapp.ir if it's NOT an /api/ request?
        # You have a few options here:

        # Option 1: Serve static files from a specific root directory
        # If you have a web application or static site for petosapp.ir
        # root /var/www/petosapp.ir/html; # Ensure this directory exists
        # try_files $uri $uri/ =404; # Tries to serve file, then directory, then 404

        # Option 2: Return a 404 Not Found (if no other content is intended)
        return 404 "Content not found for petosapp.ir (except /api).\n";

        # Option 3: Redirect all non-/api requests to petosapp.echa.ir
        # return 301 http://petosapp.echa.ir$request_uri;
    }
}