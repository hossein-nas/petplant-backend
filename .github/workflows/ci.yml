name: PetPlant CI/CD Pipeline

on:
  push:
    branches: ['main']
  # Re-enabling the trigger for pull requests targeting the main branch
  pull_request:
    branches: ['main']

jobs:
  #-------------------------
  # JOB 1: BUILD & PUSH
  #-------------------------
  build:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image_tag: ${{ github.sha }}
      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step now has a condition to only PUSH on a direct push to main
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          # This line is key: it only pushes if the event is a push to main
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pet-plant-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/pet-plant-backend:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

  #-------------------------
  # JOB 2: DEPLOY
  #-------------------------
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    environment: production

    # This 'if' condition ensures the deploy job ONLY runs on a push to the main branch.
    # It will be skipped for all pull_request events.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Copy deployment files to server
        uses: appleboy/scp-action@master
        working-directory: ./deployment
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml,nginx.conf'
          target: '~/petplant'

      - name: SSH and Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/petplant
            export BACKEND_IMAGE_TAG=${{ needs.build.outputs.image_tag }}
            export DOCKERHUB_USERNAME=${{ needs.build.outputs.docker_username }}
            env | grep DOCKER
            docker compose pull
            docker compose up -d
            docker image prune -af
