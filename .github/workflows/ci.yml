name: PetosApp Backend CI/CD Pipeline

on:
  push:
    branches: ['production', 'development'] # Trigger on pushes to production and development
  pull_request:
    branches: ['production', 'development'] # Trigger on PRs to production and development

jobs:
  build:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    # Set the environment based on the branch.
    # Ensure 'development' and 'production' environments are configured in your GitHub repo settings
    # with the necessary secrets (DOCKERHUB_USERNAME, DOCKERHUB_TOKEN).
    environment: ${{ (github.ref_name == 'production' && 'production') || (github.ref_name == 'development' && 'development') || 'production' }}
    outputs:
      image_tag: ${{ github.sha }}
      image_name: ${{ steps.docker_meta.outputs.image_name }} # Output the determined image name
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Determine Docker metadata and build arguments
        id: docker_meta
        run: |
          # Initialize variables with default values
          IMAGE_NAME=""
          BUILD_TARGET_STAGE=""
          NODE_ENV_ARG=""
          BUILD_ENV_ARG=""

          # Determine values based on the branch
          if [ "${{ github.ref_name }}" = "production" ]; then
            IMAGE_NAME="${{ vars.DOCKERHUB_USERNAME }}/petosapp-backend" # Use the environment variable
            BUILD_TARGET_STAGE="production-build" # Corresponds to LABEL stage="production" in Backend Dockerfile
            NODE_ENV_ARG="production"
            BUILD_ENV_ARG="production"
          elif [ "${{ github.ref_name }}" = "development" ]; then
            IMAGE_NAME="${{ vars.DOCKERHUB_USERNAME }}/petosapp-backend-development" # Use the environment variable
            BUILD_TARGET_STAGE="development-build" # Corresponds to LABEL stage="development" in Backend Dockerfile
            NODE_ENV_ARG="development"
            BUILD_ENV_ARG="development"
          else
            # Fallback for other branches (e.g., feature branches if you extend triggers)
            IMAGE_NAME="${{ vars.DOCKERHUB_USERNAME }}/petosapp-backend-temp" # Use the environment variable
            BUILD_TARGET_STAGE="production"
            NODE_ENV_ARG="production"
            BUILD_ENV_ARG="production"
          fi

          # Set outputs for subsequent steps
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "build_target_stage=$BUILD_TARGET_STAGE" >> $GITHUB_OUTPUT
          echo "node_env_arg=$NODE_ENV_ARG" >> $GITHUB_OUTPUT
          echo "build_env_arg=$BUILD_ENV_ARG" >> $GITHUB_OUTPUT

          echo "Determined Image Name: $IMAGE_NAME"
          echo "Determined Build Target Stage: $BUILD_TARGET_STAGE"
          echo "Determined NODE_ENV Arg: $NODE_ENV_ARG"
          echo "Determined BUILD_ENV Arg: $BUILD_ENV_ARG"
        shell: bash

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          # Push only on direct pushes to production or development branches, not on PRs
          push: ${{ github.event_name == 'push' && (github.ref_name == 'production' || github.ref_name == 'development') }}
          tags: |
            ${{ steps.docker_meta.outputs.image_name }}:latest
            ${{ steps.docker_meta.outputs.image_name }}:${{ github.sha }}
          # Target the specific final Dockerfile stage based on the branch
          target: ${{ steps.docker_meta.outputs.build_target_stage }}
          # Pass build arguments to the Dockerfile's build stages
          build-args: |
            NODE_ENV=${{ steps.docker_meta.outputs.node_env_arg }}
            BUILD_ENV=${{ steps.docker_meta.outputs.build_env_arg }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ steps.docker_meta.outputs.image_name }}

  deploy:
    name: Deploy to Server (Production)
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ (github.ref_name == 'production' && 'production') || (github.ref_name == 'development' && 'development') || 'production' }}
    # Only run on push to the production branch
    if: github.event_name == 'push' && ( github.ref_name == 'production' || github.ref_name == 'development')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Copy deployment directory to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'deployment' # This will copy the entire 'deployment' directory
          target: '~/petplant' # To this directory on the server

      - name: SSH and Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/petplant/deployment
            export DOCKERHUB_USERNAME=${{ vars.DOCKERHUB_USERNAME }}

            echo "--- Logging into Docker Hub on server ---"
            docker login -u "${DOCKERHUB_USERNAME}" -p "${{ vars.DOCKERHUB_USERNAME}}"

            echo "--- Pulling new images for backend ---"
            docker compose pull backend-${{ github.ref_name }}

            echo "--- Starting services ---"
            docker compose up -d backend-${{ github.ref_name }}

            echo "--- Cleaning up old images ---"
            docker image prune -af
